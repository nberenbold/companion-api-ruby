require: rubocop-rspec

AllCops:
  # Enable all the rules by default
  EnabledByDefault: true
  # Command line rubocop options
  ExtraDetails: true
  DisplayStyleGuide: true
  DisplayCopNames: true
  # Target versions
  # We do not specify Ruby version, because CodeClimate should by default
  # read .ruby-version, and send it down to Rubocop
  # (see https://github.com/codeclimate/codeclimate-rubocop/pull/68)
  # TargetRubyVersion: 2.4
  # We will lock Rails version to the newest we have in the company, so we're
  # always looking to the future.
  TargetRailsVersion: 5.1
  # Exclude auto-generated and vendored files
  Exclude:
  - 'db/schema.rb'

#-------------------------------------------------------------------------------
# Rules configuration
#-------------------------------------------------------------------------------

Bundler/OrderedGems:
  TreatCommentsAsGroupSeparators: true

Layout/AlignHash:
  EnforcedColonStyle: table
  EnforcedHashRocketStyle: table
  EnforcedLastArgumentHashStyle: always_inspect

Layout/DotPosition:
  EnforcedStyle: trailing

Layout/MultilineAssignmentLayout:
  EnforcedStyle: same_line

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented_relative_to_receiver

# Requere spaces inside of brackets, e.g. [ 1, 2, 3 ]
Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: false
  EnforcedStyle: compact

Metrics/AbcSize:
  Max: 25

Metrics/ClassLength:
  Max: 250
  CountComments: false

Metrics/LineLength:
  Max: 120
  Exclude:
  - 'db/migrate/*'
  - 'spec/**/*'
  IgnoredPatterns:
  - '^#.*'

Metrics/MethodLength:
  Max: 30
  Exclude:
  - 'db/migrate/*'

Metrics/ModuleLength:
  Max: 250
  CountComments: false

Rails/SafeNavigation:
  ConvertTry: true

Style/Alias:
  EnforcedStyle: prefer_alias_method

Style/ClassCheck:
  EnforcedStyle: kind_of?

Style/Lambda:
  EnforcedStyle: literal

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: consistent_comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: consistent_comma

#-------------------------------------------------------------------------------
# RSpec rules
#-------------------------------------------------------------------------------

RSpec/MultipleExpectations:
  Max: 7

# Name your test subject if you need to reference it explicitly. (http://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NamedSubject)
RSpec/NamedSubject:
  Enabled: false

# Spec path should end with _spec (http://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FilePath)
# example: meta_tags/view_helper*displayingdescription*_spec.rb.
RSpec/FilePath:
  Enabled: false

# The second argument to describe should be the method being tested. '#instance' or '.class'. (http://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeMethod)
# example: describe MetaTags::ViewHelper, 'displaying description' do
RSpec/DescribeMethod:
  Enabled: false

# Example has too many lines. (http://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleLength)
RSpec/ExampleLength:
  Enabled: false

RSpec/VerifiedDoubles:
  Enabled: false

#-------------------------------------------------------------------------------
# Disabled rules
#-------------------------------------------------------------------------------

# Yes, we have meta-tags.rb for simplicity
Naming/FileName:
  Enabled: false

# Allow not null columns without a default value
Rails/NotNullColumn:
  Enabled: false

# This check does not distinguish between "private :x" and "private def x"
Style/AccessModifierDeclarations:
  Enabled: false

Style/ClassAndModuleChildren:
  Enabled: false

# Do not require copyright information
Style/Copyright:
  Enabled: false

# Do not require class and module documentation
Style/Documentation:
  Enabled: false

# Do not require method documentation
Style/DocumentationMethod:
  Enabled: false

# Allow double negation (!!@var)
Style/DoubleNegation:
  Enabled: false

# Do not enforce if modifier, sometimes it is better to split for long lines
Style/IfUnlessModifier:
  Enabled: false

# Allow trailing comments
Style/InlineComment:
  Enabled: false

# Do not require parentheses around method arguments
Style/MethodCallWithArgsParentheses:
  Enabled: false

# Do not enforce `else` on conditions
Style/MissingElse:
  Enabled: false

# Allow both `.positive?` and `> 0` variants
Style/NumericPredicate:
  Enabled: false

# Do not enforce using symbols for hash keys
Style/StringHashKeys:
  Enabled: false

# Do not enforce usage of single quotes on strings
Style/StringLiterals:
  Enabled: false

# Do not require to use %i[] around symbol arrays
Style/SymbolArray:
  Enabled: false

# Do not require to use %w[] around word arrays
Style/WordArray:
  Enabled: false